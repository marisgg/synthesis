pomdp

const int N = 3;
const int gMIN = 1;
const int gMAX = N;

hole int ox_init in {2..2};
hole int oy_init in {1..3};

observable "placed" = placed;
observable "goal" = goal;
//observable "at" = at;
observable "nearx" = !goal & nearx;
//observable "neary" = neary;

formula goal = (x=gMAX);
formula at = (x = ox & y = oy);
formula dx = max(x-ox,ox-x);
formula dy = max(y-oy,oy-y);
formula nearx = dx<=1 & dy<=0;
//formula neary = dx<=0 & dy<=1;

const double slip = 0.1;

module obstacle1
    placed: bool init false;
    ox : [gMIN..gMAX];
    oy : [gMIN..gMAX];

    [place] !placed -> (ox'=ox_init) & (oy'=oy_init) & (placed'=true);
    [up] placed -> true;
    [do] placed -> true;
    [le] placed -> true;
    [ri] placed -> true;
endmodule


formula yu = min(y+1,gMAX);
formula yd = max(y-1,gMIN);
formula xr = min(x+1,gMAX);
formula xl = max(x-1,gMIN);

module agent
    x : [gMIN..gMAX] init gMIN;
    y : [gMIN..gMAX] init 1;

    //[place] true -> 1/3 : (y'=1) + 1/3 : (y'=2) + 1/3 : (y'=3);
    // [up] true -> 1-slip : (y'=yu) + slip : (x'=xr);
    // [le] true -> 1-slip : (x'=xl) + slip : (y'=yu);
    // [do] true -> 1-slip : (y'=yd) + slip : (x'=xl);
    // [ri] true -> 1-slip : (x'=xr) + slip : (y'=yd);

    [up] true -> 1-slip : (y'=yu) + slip : (y'=yd);
    [le] true -> 1-slip : (x'=xl) + slip : (y'=yd);
    [do] true -> 1-slip : (y'=yd) + slip : (y'=yd);
    [ri] true -> 1-slip : (x'=xr) + slip : (y'=yd);

    // [up] true -> 1-slip : (y'=yu) + slip/2 : (x'=xr) + slip/2 : (x'=xl);
    // [le] true -> 1-slip : (x'=xl) + slip/2 : (y'=yu) + slip/2 : (y'=yd);
    // [do] true -> 1-slip : (y'=yd) + slip/2 : (x'=xl) + slip/2 : (x'=xr);
    // [ri] true -> 1-slip : (x'=xr) + slip/2 : (y'=yd) + slip/2 : (y'=yu);

    //[up] true -> (y'=yu);
    //[le] true -> (x'=xl);
    //[do] true -> (y'=yd);
    //[ri] true -> (x'=xr);
endmodule

formula step_penalty = 0;
formula crash_penalty = 100;
formula penalty = step_penalty + (at?crash_penalty:0);

rewards "penalty"
    [up] true : penalty;
    [do] true : penalty;
    [le] true : penalty;
    [ri] true : penalty;
endrewards
